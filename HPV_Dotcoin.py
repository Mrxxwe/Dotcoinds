from requests import post, get

from threading import Thread, Lock

from os import system as sys

from platform import system as s_name

from time import sleep

from random import randint

from colorama import Fore

from typing import Literal

from datetime import datetime, timedelta

from urllib.parse import unquote

from json import loads

from itertools import cycle



from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts

from Core.Tools.HPV_Proxy import HPV_Proxy_Checker

from Core.Tools.HPV_User_Agent import HPV_User_Agent



from Core.Config.HPV_Config import *















class HPV_Dotcoin:

    '''

    AutoBot Ferma /// HPV

    ---------------------

    [1] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞`

    

    [2] - `–£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤`

        [2.1] - `–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –±—É—Å—Ç 'Multitap' (—É—Ä–æ–Ω –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø)`

        

        [2.2] - `–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –±—É—Å—Ç 'Daily Attempts' (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)`

    

    [3] - `–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ DTC`

    

    [4] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è`

    

    [5] - `–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –∏ –æ—Ç—ã–≥—Ä—ã—à –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä`

    

    [6] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 8 –¥–æ 9 —á–∞—Å–æ–≤`

    

    [7] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 8-9 —á–∞—Å–æ–≤`

    '''







    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:

        HPV = self.URL_Clean(URL)

        self.Name = Name                      # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞

        self.URL = HPV['URL']                 # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app

        self.USER_ID = HPV['UID']             # Telegram ID –∞–∫–∫–∞—É–Ω—Ç–∞

        self.Proxy = Proxy                    # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)

        self.UA = HPV_User_Agent()            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent

        self.Token = self.Authentication()    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å mini app







    def URL_Clean(self, _URL: str) -> dict:

        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''



        try:

            UID = str(loads(unquote(unquote(unquote(_URL))).split('&')[1].split('=')[1])['id'])

            URL = unquote(_URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])

            return {'UID': UID, 'URL': URL}

        except:

            return {'UID': None, 'URL': None}







    def Current_Time(self) -> str:

        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''



        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'







    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:

        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''



        with Console_Lock:

            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞

            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å



            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞

            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫

            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞



            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)







    def Authentication(self) -> str:

        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''



        URL = 'https://jjvnmoyncmcewnuykyid.supabase.co/functions/v1/getToken'

        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'content-type': 'application/json', 'sec-ch-ua-mobile': '?1', 'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'user-agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'accept': '*/*', 'origin': 'https://dot.dapplab.xyz', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'cross-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://dot.dapplab.xyz/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        Json = {'initData': self.URL}



        try:

            Token = post(URL, headers=Headers, json=Json, proxies=self.Proxy).json()['token']

            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

            return Token

        except:

            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')

            return ''







    def ReAuthentication(self) -> None:

        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''



        self.Token = self.Authentication()







    def Get_Info(self) -> dict:

        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä'''



        URL = 'https://jjvnmoyncmcewnuykyid.supabase.co/rest/v1/rpc/get_user_info'

        Headers = {'x-client-info': 'postgrest-js/1.9.2', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'content-type': 'application/json', 'content-profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'x-telegram-user-id': self.USER_ID, 'sec-ch-ua-platform': '"Android"', 'accept': '*/*', 'origin': 'https://dot.dapplab.xyz', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'cross-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://dot.dapplab.xyz/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}



        try:

            HPV = post(URL, headers=Headers, json={}, proxies=self.Proxy).json()



            Balance = HPV['balance'] # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

            Plays = HPV['daily_attempts'] # –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä

            Click_LVL = str(HPV['multiple_clicks']) # –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã –∫–ª–∏–∫–∞

            Limit_LVL = str(HPV['limit_attempts'] - 9) # –£—Ä–æ–≤–µ–Ω—å –ª–∏–º–∏—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏

            DTC_LVL = HPV['dtc_level'] # –£—Ä–æ–≤–µ–Ω—å —Ñ–∞—Ä–º–∞ DTC



            return {'Balance': f'{Balance:,}', 'Plays': Plays, 'Click_LVL': Click_LVL, 'Limit_LVL': Limit_LVL, 'DTC_LVL': DTC_LVL}

        except:

            return None







    def Get_DTC_Balance(self) -> int:

        '''–ë–∞–ª–∞–Ω—Å DTC'''



        URL = 'https://api.dotcoin.bot/rest/v1/rpc/get_assets'

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'accept-profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://dot.dapplab.xyz', 'priority': 'u=1, i', 'referer': 'https://dot.dapplab.xyz/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'user-agent': self.UA, 'x-client-info': 'postgrest-js/0.0.0-automated', 'x-telegram-user-id': self.USER_ID}



        try:

            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()



            for TOKEN in HPV:

                if TOKEN['symbol'] == 'DTC':

                    return TOKEN['amount']

        except:

            return 0







    def Play(self) -> None:

        '''–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã'''



        URL = 'https://jjvnmoyncmcewnuykyid.supabase.co/rest/v1/rpc/save_coins'

        Headers = {'x-client-info': 'postgrest-js/1.9.2', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'content-type': 'application/json', 'content-profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'x-telegram-user-id': self.USER_ID, 'sec-ch-ua-platform': '"Android"', 'accept': '*/*', 'origin': 'https://dot.dapplab.xyz', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'cross-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://dot.dapplab.xyz/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        _COINS = randint(COINS[0], COINS[1]) # –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç



        try:

            HPV = post(URL, headers=Headers, json={'coins': _COINS}, proxies=self.Proxy).json()['success']



            if HPV:

                self.Logging('Success', self.Name, 'üü¢', f'–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞! +{_COINS:,}!')

            else:

                self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')

        except:

            self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')







    def DTC_Update(self) -> bool:

        '''–ê–ø–≥—Ä–µ–π–¥ DTC –º–∞–π–Ω–∏–Ω–≥–∞'''



        URL = 'https://api.dotcoin.bot/functions/v1/upgradeDTCMiner'

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'authorization': f'Bearer {self.Token}', 'origin': 'https://dot.dapplab.xyz', 'priority': 'u=1, i', 'referer': 'https://dot.dapplab.xyz/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'user-agent': self.UA, 'x-telegram-user-id': self.USER_ID}



        try:

            return True if post(URL, headers=Headers, proxies=self.Proxy).json()['success'] == True else False

        except:

            return False







    def Update_Boosts(self, UP_Type: Literal['Click_LVL', 'Limit_LVL']) -> bool:

        '''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤'''



        Boosts_LVL = self.Get_Info()

        if UP_Type == 'Click_LVL':

            URL = 'https://api.dotcoin.bot/rest/v1/rpc/add_multitap'

            Data = '{"lvl":' + Boosts_LVL['Click_LVL'] + '}'

        else:

            URL = 'https://api.dotcoin.bot/rest/v1/rpc/add_attempts'

            Data = '{"lvl":' + Boosts_LVL['Limit_LVL'] + '}'

        Headers = {'Host': 'api.dotcoin.bot', 'Content-Length': '9', 'x-client-info': 'postgrest-js/0.0.0-automated', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'Content-Type': 'application/json', 'Content-Profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'x-telegram-user-id': self.USER_ID, 'sec-ch-ua-platform': '"Android"', 'Accept': '*/*', 'Origin': 'https://dot.dapplab.xyz', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'cross-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'https://dot.dapplab.xyz/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}



        try:

            post(URL, headers=Headers, data=Data, proxies=self.Proxy).json()['success']

            return True

        except:

            return False







    def View_Ads(self) -> bool:

        '''–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã'''



        URL = 'https://jjvnmoyncmcewnuykyid.supabase.co/rest/v1/rpc/restore_attempt'

        Headers = {'x-client-info': 'postgrest-js/1.9.2', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'content-type': 'application/json', 'content-profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'x-telegram-user-id': self.USER_ID, 'sec-ch-ua-platform': '"Android"', 'accept': '*/*', 'origin': 'https://dot.dapplab.xyz', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'cross-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://dot.dapplab.xyz/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}



        try:

            HPV = post(URL, headers=Headers, json={}, proxies=self.Proxy).json()['success']



            if HPV:

                self.Logging('Success', self.Name, 'üü¢', '–†–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞! +1 –∏–≥—Ä–∞')

                return True

            else:

                self.Logging('Error', self.Name, 'üî¥', '–†–µ–∫–ª–∞–º–∞ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞!')

                return False

        except:

            self.Logging('Error', self.Name, 'üî¥', '–†–µ–∫–ª–∞–º–∞ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞!')

            return False







    def Claim_Bonus(self) -> None:

        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞'''



        URL = 'https://jjvnmoyncmcewnuykyid.supabase.co/rest/v1/rpc/try_your_luck'

        Headers = {'x-client-info': 'postgrest-js/1.9.2', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'content-type': 'application/json', 'content-profile': 'public', 'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impqdm5tb3luY21jZXdudXlreWlkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDg3MDE5ODIsImV4cCI6MjAyNDI3Nzk4Mn0.oZh_ECA6fA2NlwoUamf1TqF45lrMC0uIdJXvVitDbZ8', 'x-telegram-user-id': self.USER_ID, 'sec-ch-ua-platform': '"Android"', 'accept': '*/*', 'origin': 'https://dot.dapplab.xyz', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'cross-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://dot.dapplab.xyz/', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}



        try:

            HPV = post(URL, headers=Headers, json={'coins': 150_000}, proxies=self.Proxy).json()['success']



            if HPV:

                self.Logging('Success', self.Name, 'üü¢', '–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +150,000')

            else:

                self.Logging('Warning', self.Name, 'üü°', '–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω!')

        except:

            self.Logging('Error', self.Name, 'üî¥', '–ë–æ–Ω—É—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω!')







    def Run(self) -> None:

        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''



        while True:

            try:

                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞

                    INFO = self.Get_Info()

                    Balance = INFO['Balance']

                    Get_plays = INFO['Plays']

                    Click_LVL = int(INFO['Click_LVL']) # –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã –∫–ª–∏–∫–∞

                    Limit_LVL = int(INFO['Limit_LVL']) # –£—Ä–æ–≤–µ–Ω—å –ª–∏–º–∏—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏

                    DTC_LVL = INFO['DTC_LVL'] # –£—Ä–æ–≤–µ–Ω—å —Ñ–∞—Ä–º–∞ DTC





                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Balance} /// –ë–∞–ª–∞–Ω—Å DTC: {self.Get_DTC_Balance()} /// –£—Ä–æ–≤–µ–Ω—å DTC: {DTC_LVL}')

                    Changes = 0





                    self.Claim_Bonus() # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞





                    # –£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–∞ `Multitap` (—É—Ä–æ–Ω –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø)

                    if Click_LVL < MAX_CLICK_LVL:

                        if self.Update_Boosts('Click_LVL'):

                            self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `Multitap` —É–ª—É—á—à–µ–Ω!')

                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è

                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ



                    # –£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–∞ `Daily Attempts` (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)

                    if Limit_LVL < MAX_LIMIT_LVL:

                        if self.Update_Boosts('Limit_LVL'):

                            self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `Daily Attempts` —É–ª—É—á—à–µ–Ω!')

                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è

                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ





                    # –£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ DTC

                    if self.DTC_Update():

                        self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ê–ø–≥—Ä–µ–π–¥ –º–∞–π–Ω–∏–Ω–≥–∞ —É—Å–ø–µ—à–µ–Ω!')

                        Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è

                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ





                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤ –∏/–∏–ª–∏ –∞–ø–≥—Ä–µ–π–¥ –±–æ—Å—Å–∞

                    if Changes:

                        self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}')





                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è

                    if Get_plays > 0:

                        self.Logging('Success', self.Name, 'üéÆ', f'–ò–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_plays}!')

                        for _ in range(Get_plays):

                            self.Play()

                            sleep(randint(12, 23))





                    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –∏ –æ—Ç—ã–≥—Ä—ã—à –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä

                    while True:

                        if self.View_Ads():

                            self.Play()

                            sleep(randint(12, 23))

                        else:

                            break





                    Waiting = randint(29_000, 32_500) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è

                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ



                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–≥—Ä: {self.Get_Info()["Balance"]} /// –ë–∞–ª–∞–Ω—Å DTC: {self.Get_DTC_Balance()} /// –£—Ä–æ–≤–µ–Ω—å DTC: {self.Get_Info()["DTC_LVL"]}')

                    self.Logging('Warning', self.Name, '‚è≥', f'–ò–≥—Ä –±–æ–ª—å—à–µ –Ω–µ—Ç! –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä: {Waiting_STR}!')



                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 8 –¥–æ 9 —á–∞—Å–æ–≤

                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞



                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞

                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥

                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

            except:

                pass















if __name__ == '__main__':

    sys('cls') if s_name() == 'Windows' else sys('clear')



    Console_Lock = Lock()

    Proxy = HPV_Proxy_Checker()



    def Start_Thread(Account, URL, Proxy = None):

        Dotcoin = HPV_Dotcoin(Account, URL, Proxy)

        Dotcoin.Run()



    if Proxy:

        DIVIDER = Fore.BLACK + ' | '

        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'

        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)

        sleep(5)



    try:

        for Account, URL in HPV_Get_Accounts().items():

            if Proxy:

                Proxy = cycle(Proxy)

                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()

            else:

                Thread(target=Start_Thread, args=(Account, URL,)).start()

    except:

        print(Fore.RED + '\n\t–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è `HPV_Account.json`, —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')



